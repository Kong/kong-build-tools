ARG RESTY_IMAGE_BASE="ubuntu"
ARG RESTY_IMAGE_TAG="bionic"
ARG DOCKER_BASE_SUFFIX
ARG DOCKER_REPOSITORY

FROM ${DOCKER_REPOSITORY}:${RESTY_IMAGE_BASE}-${RESTY_IMAGE_TAG}-${DOCKER_BASE_SUFFIX}

ARG EDITION="community"
ENV EDITION $EDITION

ARG LIBYAML_VERSION=0.2.1
ENV LIBYAML_VERSION $LIBYAML_VERSION
RUN curl -fsSLo /tmp/yaml-${LIBYAML_VERSION}.tar.gz https://pyyaml.org/download/libyaml/yaml-${LIBYAML_VERSION}.tar.gz \
    && cd /tmp \
    && tar xzf yaml-${LIBYAML_VERSION}.tar.gz \
    && ln -s /tmp/yaml-${LIBYAML_VERSION} /tmp/yaml \
    && cd /tmp/yaml \
    && ./configure \
      --libdir=/tmp/build/usr/local/kong/lib \
      --includedir=/tmp/yaml-${LIBYAML_VERSION} \
    && make install \
    && ./configure --libdir=/usr/local/kong/lib \
    && make install \
    && rm -rf /tmp/yaml-${LIBYAML_VERSION}

ARG KONG_GMP_VERSION=6.1.2
ENV KONG_GMP_VERSION $KONG_GMP_VERSION
RUN if [ "$EDITION" = "enterprise" ] ; then curl -fsSLo /tmp/gmp-${KONG_GMP_VERSION}.tar.bz2 https://ftp.gnu.org/gnu/gmp/gmp-${KONG_GMP_VERSION}.tar.bz2 \
    && cd /tmp \
    && tar xjf gmp-${KONG_GMP_VERSION}.tar.bz2 \
    && ln -s /tmp/gmp-${KONG_GMP_VERSION} /tmp/gmp \
    && cd /tmp/gmp \
    && ./configure --build=x86_64-linux-gnu --enable-static=no --libdir=/tmp/build/usr/local/kong/lib \
    && make -j${RESTY_J}; fi

ARG KONG_NETTLE_VERSION="3.4.1"
ENV KONG_NETTLE_VERSION $KONG_NETTLE_VERSION
RUN if [ "$EDITION" = "enterprise" ] ; then curl -fsSLo /tmp/nettle-${KONG_NETTLE_VERSION}.tar.gz https://ftp.gnu.org/gnu/nettle/nettle-${KONG_NETTLE_VERSION}.tar.gz \
    && cd /tmp \
    && tar xzf nettle-${KONG_NETTLE_VERSION}.tar.gz \
    && ln -s /tmp/nettle-${KONG_NETTLE_VERSION} /tmp/nettle \
    && cd /tmp/nettle \
    && LDFLAGS="-Wl,-rpath,/usr/local/kong/lib" \
    ./configure --disable-static \
    --libdir=/tmp/build/usr/local/kong/lib \
    --with-include-path="/tmp/gmp-${KONG_GMP_VERSION}/" \
    --with-lib-path="/tmp/gmp-${KONG_GMP_VERSION}/.libs/" \
    && make -j${RESTY_J}; fi

ARG KONG_DEP_PASSWDQC_VERSION="1.3.1"
ENV KONG_DEP_PASSWDQC_VERSION $KONG_DEP_PASSWDQC_VERSION
RUN if [ "$EDITION" = "enterprise" ] ; then curl -fsSLo /tmp/passwdqc-${KONG_DEP_PASSWDQC_VERSION}.tar.gz https://www.openwall.com/passwdqc/passwdqc-${KONG_DEP_PASSWDQC_VERSION}.tar.gz \
    && cd /tmp \
    && tar xzf passwdqc-${KONG_DEP_PASSWDQC_VERSION}.tar.gz \
    && ln -s /tmp/passwdqc-${KONG_DEP_PASSWDQC_VERSION} /tmp/passwdqc \
    && cd /tmp/passwdqc \
    && make libpasswdqc.so -j$BUILD_JOBS \
    && make \
    DESTDIR=/tmp/build/ \
    SHARED_LIBDIR=/usr/local/kong/lib \
    SHARED_LIBDIR_REL='.' \
    DEVEL_LIBDIR=/usr/local/kong/lib \
    INCLUDEDIR=/usr/local/kong/include/passwdqc \
    CONFDIR=/usr/local/etc/passwdqc \
    MANDIR=/usr/local/share/man \
    install_lib; fi

ENV GOLANG_VERSION 1.13.5

RUN set -eux; \
	dpkgArch="$(dpkg --print-architecture || echo amd64)"; \
	case "${dpkgArch##*-}" in \
		amd64) goRelArch='linux-amd64'; goRelSha256='512103d7ad296467814a6e3f635631bd35574cab3369a97a323c9a585ccaa569' ;; \
		armhf) goRelArch='linux-armv6l'; goRelSha256='26259f61d52ee2297b1e8feef3a0fc82144b666a2b95512402c31cc49713c133' ;; \
		arm64) goRelArch='linux-arm64'; goRelSha256='227b718923e20c846460bbecddde9cb86bad73acc5fb6f8e1a96b81b5c84668b' ;; \
		*) goRelArch='src'; goRelSha256='27d356e2a0b30d9983b60a788cf225da5f914066b37a6b4f69d457ba55a626ff'; \
			echo >&2; echo >&2 "warning: current architecture ($dpkgArch) does not have a corresponding Go binary release; will be building from source"; echo >&2 ;; \
	esac; \
	\
	url="https://golang.org/dl/go${GOLANG_VERSION}.${goRelArch}.tar.gz"; \
	curl -fsSLo go.tgz "$url"; \
	echo "${goRelSha256} *go.tgz" | sha256sum -c -; \
	tar -C /usr/local -xzf go.tgz; \
	rm go.tgz; \
	\
	if [ "$goRelArch" = 'src' ]; then \
		echo >&2; \
		echo >&2 'error: UNIMPLEMENTED'; \
		echo >&2 'TODO install golang-any from jessie-backports for GOROOT_BOOTSTRAP (and uninstall after build)'; \
		echo >&2; \
		exit 1; \
	fi; \
	\
	export PATH="/usr/local/go/bin:$PATH"


ARG KONG_GO_PLUGINSERVER_VERSION=master
ENV KONG_GO_PLUGINSERVER_VERSION $KONG_GO_PLUGINSERVER_VERSION

ENV GOPATH=/tmp/go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

RUN go version
RUN mkdir -p /tmp/go/src/github.com/kong/ \
    && git clone --branch ${KONG_GO_PLUGINSERVER_VERSION} https://github.com/Kong/go-pluginserver.git /tmp/go/src/github.com/kong/go-pluginserver \
    && cd /tmp/go/src/github.com/kong/go-pluginserver \
    && go mod tidy
    
RUN set -eux; \
	dpkgArch="$(dpkg --print-architecture || echo amd64)" \
	&& cd /tmp/go/src/github.com/kong/go-pluginserver \
    && make build GOARCH=$dpkgArch GOOS=linux \
    && mkdir -p /tmp/build/usr/local/bin/ \
    && mv go-pluginserver /tmp/build/usr/local/bin/

ARG RESTY_VERSION=1.13.6.2
LABEL resty_version="${RESTY_VERSION}"

ARG RESTY_OPENSSL_VERSION=1.1.1c
LABEL resty_openssl_version="${RESTY_OPENSSL_VERSION}"

ARG RESTY_PCRE_VERSION=8.41
LABEL resty_pcre_version="${RESTY_PCRE_VERSION}"

ARG RESTY_LUAROCKS_VERSION=2.4.3
LABEL resty_luarocks_version="${RESTY_LUAROCKS_VERSION}"

COPY openresty-build-tools /tmp/openresty-build-tools
COPY openresty-patches /tmp/openresty-patches
COPY build-openresty.sh /tmp/build-openresty.sh

ARG OPENRESTY_PATCHES=1
ENV OPENRESTY_PATCHES="${OPENRESTY_PATCHES}"

COPY kong-licensing /enterprise/kong-licensing
COPY lua-kong-nginx-module /enterprise/lua-kong-nginx-module

ARG DEBUG=1
RUN DEBUG="${DEBUG}" /tmp/build-openresty.sh \
    && rm -rf /work

WORKDIR /kong
COPY kong /kong
COPY build-kong.sh /build-kong.sh

RUN /build-kong.sh && rm -rf /kong

RUN sed -i 's/\/tmp\/build//' `grep -l -I -r '\/tmp\/build' /tmp/build/` || true

